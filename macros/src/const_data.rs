extern crate proc_macro;

use proc_macro2::Ident;
use syn::parse::ParseStream;
use syn::{parse::Parse, Expr, LitStr, Result, Token, Type};
use syn::{DeriveInput, Field};

pub(crate) struct StructFields {
    pub typename: Ident,
    pub name_field: Option<Ident>,
    pub code_field: Option<Ident>,
    pub fields: Vec<(Ident, Type)>,
}

pub(crate) fn parse_struct_fields(mut input: DeriveInput) -> Result<(DeriveInput, StructFields)> {
    let mut fields = Vec::new();
    let mut code_field = None;
    let mut name_field = None;

    if let syn::Data::Struct(ref mut data_struct) = input.data {
        // Iterate over the fields of the struct
        for field in &mut data_struct.fields {
            if check_code_field(field, &mut code_field)? {
                continue;
            }
            if check_name_field(field, &mut name_field)? {
                continue;
            }
            if let Some(ref ident) = field.ident {
                fields.push((ident.clone(), field.ty.clone()));
            } else {
                panic!("The const_data macro can only be applied to structs with named fields");
            }
        }
    } else {
        panic!("The const_data macro can only be applied to structs with named fields");
    }

    // Generate code that does nothing (for now), just return the original struct
    // This is where you'd add code generation based on parsed fields
    let typename = input.ident.clone();
    Ok((
        input,
        StructFields {
            typename,
            code_field,
            name_field,
            fields,
        },
    ))
}

pub(crate) struct ConstValue {
    pub name: LitStr,
    pub values: Vec<Expr>,
}

impl Parse for ConstValue {
    fn parse(input: ParseStream) -> Result<Self> {
        let name: LitStr = input.parse()?;
        let mut values = vec![];
        loop {
            if let Ok(_) = input.parse::<Token![,]>() {
                let value: Expr = input.parse()?;
                values.push(value);
            } else {
                break;
            }
        }
        Ok(ConstValue { name, values })
    }
}

fn check_autogenerated_field(
    field: &mut Field,
    ident: &mut Option<Ident>,
    attr: &'static str,
    type_check: impl Fn(&Field, &'static str) -> Result<()>,
) -> Result<bool> {
    if field.attrs.iter().any(|a| a.path().is_ident(attr)) {
        // Only one code field
        if ident.is_some() {
            return Err(syn::Error::new_spanned(
                &ident,
                format!("the const_data macro requires no more than one #[{attr}] field"),
            ));
        }
        type_check(field, attr)?;
        // Must be a named field
        if field.ident.is_none() {
            return Err(syn::Error::new_spanned(
                &ident,
                "the const_data macro can only be applied to structs with named fields",
            ));
        }
        *ident = Some(field.ident.clone().unwrap());
        field.attrs.retain(|a| !a.path().is_ident(attr));
        return Ok(true);
    }
    Ok(false)
}

fn check_code_field(field: &mut Field, code_field: &mut Option<Ident>) -> Result<bool> {
    check_autogenerated_field(field, code_field, "code", check_u32)
}

fn check_name_field(field: &mut Field, name_field: &mut Option<Ident>) -> Result<bool> {
    check_autogenerated_field(field, name_field, "name", check_static_str)
}

fn check_u32(field: &Field, attr: &str) -> Result<()> {
    if let Type::Path(ref type_path) = field.ty {
        if let Some(last_segment) = type_path.path.segments.last() {
            if last_segment.ident == "u32" {
                return Ok(());
            }
        }
    }
    Err(syn::Error::new_spanned(
        field.ident.clone().unwrap(),
        format!("expected {attr} field to be a u32"),
    ))
}

fn check_static_str(field: &Field, attr: &str) -> Result<()> {
    if let Type::Reference(type_reference) = &field.ty {
        if let Some(lifetime) = &type_reference.lifetime {
            if lifetime.ident == "static"
                && matches!(*type_reference.elem, Type::Path(ref type_path) if type_path.path.is_ident("str"))
            {
                return Ok(());
            }
        }
    }
    Err(syn::Error::new_spanned(
        field,
        format!("expected {attr} field to be a &'static str"),
    ))
}
